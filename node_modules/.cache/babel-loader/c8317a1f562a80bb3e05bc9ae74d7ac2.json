{"ast":null,"code":"var _jsxFileName = \"E:\\\\Rails\\\\RailsOJT\\\\outline-create-too-mdy_nodocker\\\\app\\\\javascript\\\\components\\\\employees\\\\test.jsx\",\n    _this = this;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// モーダルフォームの管理\nvar _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setIsModalVisible = _useState2[1]; // popupフィールドのテーブルにデータを設定するため新しいvariableを指定する。\n\n\nvar _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    tableData = _useState4[0],\n    setColumnData = _useState4[1]; // popupフィールドのデータを検索するため設定する入力フィールド\n\n\nvar searchField = /*#__PURE__*/React.createElement(Form.Item, {\n  label: I18n.t(\"item.company\"),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Input, {\n  key: \"1\",\n  name: \"searchData\",\n  onChange: function onChange(e) {\n    return handleSearch(e.target.value ? [e.target.value] : []);\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n})); // companyデータをRadioボタンで管理する。\n\nvar handleSelect = function handleSelect(selectData) {\n  // モーダルフォームを表示する機能をする。\n  setIsModalVisible(true); // この機能を作業するとpopupフィールドのテーブルにデータを設定する。\n\n  setColumnData(company);\n}; // popupフィールドのデータを検索した後結果を保つするためこのarrayを作りました。\n\n\nvar companies = []; // popupフィールドの設定するデータを検索する。\n\nvar handleSearch = function handleSearch(searchData) {\n  for (var i = 0; i < company.length; i++) {\n    var _company$i$company_na, _searchData$toString;\n\n    if ((_company$i$company_na = company[i].company_name) !== null && _company$i$company_na !== void 0 && _company$i$company_na.toLowerCase().includes((_searchData$toString = searchData.toString()) === null || _searchData$toString === void 0 ? void 0 : _searchData$toString.toLowerCase())) {\n      companies.push(company[i]);\n    }\n  } // popupフィールドのデータを検索した結果をpopupフィールドのテーブルに表示する。\n\n\n  setColumnData(companies);\n}; // popupフィールドの設定するデータテーブルをつくる。\n\n\nvar columns = [{\n  title: \"アクション\",\n  key: \"action\",\n  render: function render(_text, record) {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      key: record.company_id,\n      value: record.company_id,\n      onChange: function (_onChange) {\n        function onChange() {\n          return _onChange.apply(this, arguments);\n        }\n\n        onChange.toString = function () {\n          return _onChange.toString();\n        };\n\n        return onChange;\n      }(function () {\n        return onChange(record);\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n}, {\n  title: I18n.t(\"item.company\"),\n  dataIndex: \"company_name\",\n  key: \"company_id\"\n}];","map":{"version":3,"sources":["E:/Rails/RailsOJT/outline-create-too-mdy_nodocker/app/javascript/components/employees/test.jsx"],"names":["useState","isModalVisible","setIsModalVisible","tableData","setColumnData","searchField","I18n","t","e","handleSearch","target","value","handleSelect","selectData","company","companies","searchData","i","length","company_name","toLowerCase","includes","toString","push","columns","title","key","render","_text","record","company_id","onChange","dataIndex"],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA,gBAA4CA,QAAQ,CAAC,KAAD,CAApD;AAAA;AAAA,IAAOC,cAAP;AAAA,IAAuBC,iBAAvB,iB,CAEA;;;AAEA,iBAAmCF,QAAQ,CAAC,IAAD,CAA3C;AAAA;AAAA,IAAOG,SAAP;AAAA,IAAkBC,aAAlB,iB,CAEA;;;AAEA,IAAMC,WAAW,gBACf,oBAAC,IAAD,CAAM,IAAN;AAAW,EAAA,KAAK,EAAEC,IAAI,CAACC,CAAL,CAAO,cAAP,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,KAAD;AACE,EAAA,GAAG,EAAC,GADN;AAEE,EAAA,IAAI,EAAC,YAFP;AAGE,EAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,WAAOC,YAAY,CAACD,CAAC,CAACE,MAAF,CAASC,KAAT,GAAiB,CAACH,CAAC,CAACE,MAAF,CAASC,KAAV,CAAjB,GAAoC,EAArC,CAAnB;AAAA,GAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,C,CAUA;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAgB;AACnC;AAEAX,EAAAA,iBAAiB,CAAC,IAAD,CAAjB,CAHmC,CAKnC;;AAEAE,EAAAA,aAAa,CAACU,OAAD,CAAb;AACD,CARD,C,CAUA;;;AAEA,IAAMC,SAAS,GAAG,EAAlB,C,CAEA;;AAEA,IAAMN,YAAY,GAAG,SAAfA,YAAe,CAACO,UAAD,EAAgB;AACnC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AAAA;;AACvC,iCACEH,OAAO,CAACG,CAAD,CAAP,CAAWE,YADb,kDACE,sBAEIC,WAFJ,GAIGC,QAJH,yBAIYL,UAAU,CAACM,QAAX,EAJZ,yDAIY,qBAAuBF,WAAvB,EAJZ,CADF,EAME;AACAL,MAAAA,SAAS,CAACQ,IAAV,CAAeT,OAAO,CAACG,CAAD,CAAtB;AACD;AACF,GAXkC,CAanC;;;AAEAb,EAAAA,aAAa,CAACW,SAAD,CAAb;AACD,CAhBD,C,CAkBA;;;AAEA,IAAMS,OAAO,GAAG,CACd;AACEC,EAAAA,KAAK,EAAE,OADT;AAGEC,EAAAA,GAAG,EAAE,QAHP;AAKEC,EAAAA,MAAM,EAAE,gBAACC,KAAD,EAAQC,MAAR;AAAA,wBACN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,GAAG,EAAEA,MAAM,CAACC,UADd;AAEE,MAAA,KAAK,EAAED,MAAM,CAACC,UAFhB;AAGE,MAAA,QAAQ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QAAE;AAAA,eAAMC,QAAQ,CAACF,MAAD,CAAd;AAAA,OAAF,CAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADM;AAAA;AALV,CADc,EAiBd;AACEJ,EAAAA,KAAK,EAAEnB,IAAI,CAACC,CAAL,CAAO,cAAP,CADT;AAGEyB,EAAAA,SAAS,EAAE,cAHb;AAKEN,EAAAA,GAAG,EAAE;AALP,CAjBc,CAAhB","sourcesContent":["// モーダルフォームの管理\r\n\r\nconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n// popupフィールドのテーブルにデータを設定するため新しいvariableを指定する。\r\n\r\nconst [tableData, setColumnData] = useState(null);\r\n\r\n// popupフィールドのデータを検索するため設定する入力フィールド\r\n\r\nconst searchField = (\r\n  <Form.Item label={I18n.t(\"item.company\")}>\r\n    <Input\r\n      key=\"1\"\r\n      name=\"searchData\"\r\n      onChange={(e) => handleSearch(e.target.value ? [e.target.value] : [])}\r\n    ></Input>\r\n  </Form.Item>\r\n);\r\n\r\n// companyデータをRadioボタンで管理する。\r\n\r\nconst handleSelect = (selectData) => {\r\n  // モーダルフォームを表示する機能をする。\r\n\r\n  setIsModalVisible(true);\r\n\r\n  // この機能を作業するとpopupフィールドのテーブルにデータを設定する。\r\n\r\n  setColumnData(company);\r\n};\r\n\r\n// popupフィールドのデータを検索した後結果を保つするためこのarrayを作りました。\r\n\r\nconst companies = [];\r\n\r\n// popupフィールドの設定するデータを検索する。\r\n\r\nconst handleSearch = (searchData) => {\r\n  for (var i = 0; i < company.length; i++) {\r\n    if (\r\n      company[i].company_name\r\n\r\n        ?.toLowerCase()\r\n\r\n        .includes(searchData.toString()?.toLowerCase())\r\n    ) {\r\n      companies.push(company[i]);\r\n    }\r\n  }\r\n\r\n  // popupフィールドのデータを検索した結果をpopupフィールドのテーブルに表示する。\r\n\r\n  setColumnData(companies);\r\n};\r\n\r\n// popupフィールドの設定するデータテーブルをつくる。\r\n\r\nconst columns = [\r\n  {\r\n    title: \"アクション\",\r\n\r\n    key: \"action\",\r\n\r\n    render: (_text, record) => (\r\n      <Fragment>\r\n        <Radio\r\n          key={record.company_id}\r\n          value={record.company_id}\r\n          onChange={() => onChange(record)}\r\n        ></Radio>\r\n      </Fragment>\r\n    ),\r\n  },\r\n\r\n  {\r\n    title: I18n.t(\"item.company\"),\r\n\r\n    dataIndex: \"company_name\",\r\n\r\n    key: \"company_id\",\r\n  },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}